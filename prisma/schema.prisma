// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                String        @id @default(uuid())
  clerkUserId       String        @unique
  email             String        @unique
  name              String?
  imageUrl          String?
  transactions      Transaction[]
  accounts          Account[]
  budgets           Budget[]
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt

  @@map("users")
}

enum TransactionType {
  INCOME
  EXPENSE
}

enum RecurringInterval {
  DAILY
  WEEKLY
  MONTHLY
  YEARLY
}
enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
}

model Transaction {
  id                String            @id @default(uuid())
  type              TransactionType
  amount            Decimal
  description       String
  date              DateTime
  categoryId        String
  receiptUrl        String?
  isRecurring       Boolean            @default(false)
  recurringInterval RecurringInterval?
  nextRecurringAt   DateTime?
  lastProcessedAt   DateTime? 
  status            TransactionStatus   @default(COMPLETED)
  userId            String
  user              User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  accountId         String
  account           Account             @relation(fields: [accountId], references: [id], onDelete: Cascade)
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt

  @@index([userId])
  @@index([accountId])
  @@map("transactions")
}

enum AccountType {
  CURRENT
  SAVINGS
}

model Account {
  id               String        @id @default(uuid())
  name             String
  type             AccountType
  balance          Decimal       @default(0)
  isDefault        Boolean       @default(false)
  userId           String
  user             User          @relation(fields: [userId], references: [id], onDelete: Cascade)       
  transactions     Transaction[]
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt

  @@index([userId])
  @@map("accounts")
}

model Budget {
  id               String        @id @default(uuid())
  amount           Decimal
  lastAlertSentAt  DateTime?
  userId           String
  user             User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt

  @@index([userId])
  @@map("budgets")
}